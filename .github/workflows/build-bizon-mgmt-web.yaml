# ====================================================================================== #
#
#  Workflow : AWS EC2 CI 파이프라인
#
#  Workflow 설명 :
#    - 소스 빌드 및 S3 Bucket에 업로드
#    - 업로드된 Artifact의 Version ID를 Config Repository에 반영하여 CD 파이프라인을 트리거 함
#
#  Workflow 상세 가이드 :
#    - https://lgu-cto.atlassian.net/wiki/spaces/CLOUDASSET/pages/37479581079/AWS-EC2+CI+CD+Workflow
#
#  버전 : v1.1
#
# ====================================================================================== #
name: AWS EC2 CI 파이프라인

on:
  workflow_dispatch:
  push:
    branches:
      - dev
      - main
    tags:
      - PROD*
    paths-ignore:
      - ".github/**"

permissions:
  id-token: write
  contents: write

env:
  # Workflow 변수
  AWS_REGION: ap-northeast-2
  ARTIFACT_NAME: ci-build-artifact.tar
  # 소스 빌드 변수 - 소스 코드에 맞게 수정 필요 !!
  ARTIFACT_PATH: dist # 소스 빌드 후 Artifact가 생성되는 경로
  NODE_VERSION: lts/* # JAVA REF: https://github.com/marketplace/actions/setup-java-jdk

jobs:
  # 1. Check CI Environment (CI 환경 확인)
  #   - Workflow 트리거 유형에 따른 CI 환경 확인 및 설정
  #     : dev 브랜치 push = 개발 배포 용 CI
  #     : main 브랜치 push = 검수 배포 용 CI
  #     : PROD Release(Tag) 생성 = 상용 배포 용 CI
  #        * Release가 main 브랜치에서 생성된게 아닐 경우 실패 처리됨
  env-set:
    name: 1. Check CI Environment
    runs-on: ubuntu-latest
    outputs:
      ci-env: ${{ steps.ci-env-set.outputs.ci-env }}
      cfgstore-branch: ${{ steps.ci-env-set.outputs.cfgstore-branch }}

    steps:
      - name: DEV 빌드
        if: github.ref_name == 'dev'
        run: |
          DEPLOY_ENV=dev
          CFGSTORE_BRANCH=dev

          echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV
          echo "CFGSTORE_BRANCH=${CFGSTORE_BRANCH}" >> $GITHUB_ENV

      - name: QA 빌드
        if: github.ref_name == 'main'
        run: |
          DEPLOY_ENV=qa
          CFGSTORE_BRANCH=qa

          echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV
          echo "CFGSTORE_BRANCH=${CFGSTORE_BRANCH}" >> $GITHUB_ENV

      - name: PROD 빌드
        if: startsWith(github.ref_name, 'PROD')
        run: |
          if [ -z ${{ github.event.base_ref }} ]
          then
            BASE_REF=none
          else
            BASE_REF=${{ github.event.base_ref }}
          fi

          if [[ ${BASE_REF} != "refs/heads/main" ]]
          then
            echo "MAIN이 아닌 다른 브랜치에서 PROD Tag 생성됨"
            exit 1
          fi

          ORGA_NAME=`echo ${{ github.repository_owner }} | tr "[:upper:]" "[:lower:]"`
          if [[ ${ORGA_NAME} == "ucmp-dev-work-org" || ${ORGA_NAME} == "ucmp-prod-work-org" ]]
          then
            DEPLOY_ENV=prod-ucmp-temp
          else
            DEPLOY_ENV=prod
          fi
          CFGSTORE_BRANCH=prod

          echo "DEPLOY_ENV=${DEPLOY_ENV}" >> $GITHUB_ENV
          echo "CFGSTORE_BRANCH=${CFGSTORE_BRANCH}" >> $GITHUB_ENV

      - name: CI 환경 설정
        id: ci-env-set
        run: |
          echo "ci-env=${DEPLOY_ENV}" >> $GITHUB_OUTPUT
          echo "cfgstore-branch=${CFGSTORE_BRANCH}" >> $GITHUB_OUTPUT

  # 2. Source Build and Update Config Repo (빌드 및 Config Repo 업데이트)
  #   - 소스 코드를 빌드 후 S3 Bucket에 Artifact를 PUT
  #      ** 상용 배포의 경우 빌드 단계는 Skip 되며 검수 환경에 배포되었던 이미지를 사용함
  build:
    name: 2. Source Build and Update Config Repo
    needs: env-set
    runs-on: ubuntu-latest

    steps:
      - name: 배포 변수 설정
        run: |
          if [[ ${{ needs.env-set.outputs.ci-env }} == "dev" ]]
          then
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
          elif [[ ${{ needs.env-set.outputs.ci-env }} == "qa" ]]
          then
            echo "DEPLOY_ENV=qa" >> $GITHUB_ENV
          elif [[ ${{ needs.env-set.outputs.ci-env }} == "prod" || ${{ needs.env-set.outputs.ci-env }} == "prod-ucmp-temp" ]]
          then
            echo "DEPLOY_ENV=prod" >> $GITHUB_ENV
          else
            exit 1
          fi

      - name: 소스 코드 Checkout
        if: needs.env-set.outputs.ci-env != 'prod'
        uses: actions/checkout@v4

      - name: AWS Credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          audience: sts.amazonaws.com
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.DEV_AWS_ROLE_ARN }}

      # ========================================================================== #
      #    소스 코드 빌드 영역
      # ========================================================================== #
      - name: Node.js 환경 구성
        if: needs.env-set.outputs.ci-env != 'prod'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: NPM Install & Build
        if: needs.env-set.outputs.ci-env != 'prod'
        run: |
          npm install -g npm
          npm install -g pnpm
          pnpm install --no-frozen-lockfile
          pnpm build

      # ========================================================================== #

      - name: AWS S3 변수 설정
        run: |
          ORGA_NAME=`echo ${{ github.repository_owner }} | tr "[:upper:]" "[:lower:]"`
          echo "REPO_NAME=`echo ${GITHUB_REPOSITORY} | awk -F / '{ print $2 }'`" >> $GITHUB_ENV
          if [[ ${ORGA_NAME} == "ucmp-dev-work-org" || ${ORGA_NAME} == "ucmp-prod-work-org" ]]
          then
            ORGA_NAME=`echo ${{ secrets.ORGA_NAME }} | tr "[:upper:]" "[:lower:]"`
            echo "REPO_NAME=`echo ${{ secrets.REPO_NAME }} | awk -F / '{ print $2 }'`" >> $GITHUB_ENV
          fi

          if [[ ${{ needs.env-set.outputs.ci-env }} == "prod" || ${{ needs.env-set.outputs.ci-env }} == "prod-ucmp-temp" ]]
          then
            S3_ENV=qa
          else
            S3_ENV=${{ needs.env-set.outputs.ci-env }}
          fi

          echo "S3_ARTIFACT_BUCKET=`echo s3-${S3_ENV}-${ORGA_NAME}-app-artifact`" >> $GITHUB_ENV
          echo "SHORT_SHA=`echo ${{ github.sha }} | cut -c1-8`" >> $GITHUB_ENV

      - name: AWS S3 업로드
        if: needs.env-set.outputs.ci-env != 'prod'
        run: |
          aws s3api put-object --bucket ${S3_ARTIFACT_BUCKET} --key ${REPO_NAME}/${ARTIFACT_NAME} --body ./${ARTIFACT_PATH}/${ARTIFACT_NAME} --tagging "ShortSHA=${SHORT_SHA}"

      - name: AWS S3 Artifact 버전 및 TAG 확인
        run: |
          OBJ_VER_ID=`aws s3api list-object-versions --bucket ${S3_ARTIFACT_BUCKET} --prefix ${REPO_NAME}/${ARTIFACT_NAME} | jq '.Versions[] | select(.IsLatest == true) | {VersionId}' | jq '.VersionId' | sed 's/\"//g'`
          OBJ_TAG=`aws s3api get-object-tagging --bucket ${S3_ARTIFACT_BUCKET} --key ${REPO_NAME}/${ARTIFACT_NAME} --version-id ${OBJ_VER_ID} | jq '.TagSet[] | select(.Key == "ShortSHA") | {Value}' | jq '.Value' | sed 's/\"//g'`

          echo "OBJ_VER_ID=`echo ${OBJ_VER_ID}`" >> $GITHUB_ENV
          echo "OBJ_TAG=`echo ${OBJ_TAG}`" >> $GITHUB_ENV

      - name: (PROD) QA 배포 이미지 확인
        if: needs.env-set.outputs.ci-env == 'prod'
        run: |
          if [[ ${OBJ_TAG} != ${SHORT_SHA} ]]
          then
            echo "QA 배포 Commit ID와 불일치."
            exit 1
          fi

      - name: Config Repo Checkout
        uses: actions/checkout@v3
        with:
          path: config-repo
          repository: ${{ github.repository }}-cfgstore
          ref: ${{ needs.env-set.outputs.cfgstore-branch }}
          token: ${{ secrets.GHP_TOKEN }}

      - name: Config Repo 업데이트
        run: |
          S3_INFO_FILE=config-repo/aws-codedeploy/${DEPLOY_ENV}-scripts/s3-deployed-object.dat
          echo "=== S3 Object Version 정보 변경 ==="
          echo "S3_Bucket : "${S3_ARTIFACT_BUCKET} > ${S3_INFO_FILE}
          echo "OBJ_Key : "${REPO_NAME}"/"${ARTIFACT_NAME} >> ${S3_INFO_FILE}
          echo "OBJ_Name : "${ARTIFACT_NAME} >> ${S3_INFO_FILE}
          echo "OBJ_VersionID : "${OBJ_VER_ID} >> ${S3_INFO_FILE}
          echo "OBJ_Tag : ShortSHA="${SHORT_SHA} >> ${S3_INFO_FILE}

          COMMIT_INFO_FILE=config-repo/source_commit-id.dat
          echo "=== 소스 코드 Commit ID Config Repo에 기록 ==="
          echo ${{ github.sha }} > ${COMMIT_INFO_FILE}
          echo ${{ github.ref_name }} >> ${COMMIT_INFO_FILE}

      - name: 이미지 ID 변경 Commit Push
        working-directory: config-repo
        run: |
          REPO_NAME=`echo ${GITHUB_REPOSITORY} | awk -F / '{ print $2 }'`
          git config user.name ci.${REPO_NAME}
          git config user.email ci.${REPO_NAME}@lguplus.co.kr
          git add .
          git commit -m "From Build - ${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}"
          git push
